services:
  nginx:
    image: nginx:latest
    container_name: nginx
    volumes:
      - ./.docker/nginx/nginx.conf:/etc/nginx/nginx.conf # all configuration panel
      - ./.docker/nginx/web/local.conf:/etc/nginx/conf.d/default.conf # web panel example
      - ./.data/nginx/logs:/var/log/nginx
      # - ./.data/certs/certbot/conf:/etc/letsencrypt # uncomment when production deploy
      # - ./.data/certs/certbot/www:/var/www/certbot # uncomment when production deploy
    ports:
      - "80:80"
      # - "443:443" # uncomment when production deploy
    depends_on:
      - web
    networks:
      - application_network
    environment:
      - X_SERVER_TYPE=nginx

  web:
    build:
      context: .
      dockerfile: ./.docker/web/Dockerfile
    container_name: web
    stdin_open: true
    volumes:
      - ./:/usr/src/web
      - /usr/src/web/node_modules
      - /usr/src/web/.next
    env_file:
      - ./.env
    networks:
      - application_network
    environment:
      - X_SERVER_TYPE=web
  
  certbot:
    image: certbot/certbot
    container_name: certbot
    restart: unless-stopped
    volumes:
      - ./.data/certs/certbot/conf:/etc/letsencrypt
      - ./.data/certs/certbot/www:/var/www/certbot
    networks:
      - application_network
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  ngrok:
    image: ngrok/ngrok
    container_name: ngrok
    ports:
      - "4041:4040"
    environment:
      NGROK_AUTHTOKEN: ${NGROK_AUTH}
    command: http --domain=${NGROK_DOMAIN} nginx:80
    depends_on:
      - nginx
    networks:
      - application_network

volumes:
  pgdata:
    driver: local

networks:
  application_network:
    driver: bridge